  <div id="{{ id }}" style="width: 100%; height: 70rem; position: relative; overflow: hidden;">
    <div id="{{ id }}-loader" style="position: absolute; height: 100%; width: 100%; top: 0; left: 0; background-color: white; transition: 300ms ease-in-out; transform: translateX(-100%);"></div>
    <div id="{{ id }}-loader-screen" style="position: absolute; height: 100%; width: 100%; top: 0; left: 0; background-color: black;"></div>
  </div>

  <script type="module">
        import * as THREE from 'three';
        import { STLLoader } from 'three/addons/loaders/STLLoader'
        import { OrbitControls } from 'three/addons/controls/OrbitControls'

        const container = document.getElementById('{{ id }}');

        const loadingIndicator = document.getElementById('{{ id }}-loader')
        const loadingIndicatorScreen = document.getElementById('{{ id }}-loader-screen')
        
        var scene = new THREE.Scene();

        var camera = new THREE.PerspectiveCamera(70, container.clientWidth / container.clientHeight, 1, 1000);
        camera.position.z = 100;

        var renderer = new THREE.WebGLRenderer({antialias: true, alpha: true});
        renderer.setSize(container.clientWidth, container.clientHeight);
        container.appendChild(renderer.domElement);

        window.addEventListener('resize', function () {
            renderer.setSize(container.clientWidth, container.clientHeight);
            camera.aspect = container.clientWidth/container.clientHeight;
            camera.updateProjectionMatrix();
        }, false);

        scene.add(new THREE.HemisphereLight(0xffffff, 1000));

        const controls = new OrbitControls(camera, renderer.domElement)
        controls.enableDamping = true;
        controls.rotateSpeed = 0.1;
        controls.dampingFactor = 0.1;
        controls.enableZoom = {{ zoom }};
        controls.autoRotate = true;
        controls.autoRotateSpeed = 2;

        var material = new THREE.MeshPhongMaterial({ 
          color: 0xffffff , 
          specular: 0xffffff, 
          shininess: 400,
        });

        let loadMax = 0;

        const loader = new STLLoader()
        loader.load(
            '{{ path }}',
            function (geometry) {
                const mesh = new THREE.Mesh(geometry, material)
                scene.add(mesh)

                var middle = new THREE.Vector3();
                geometry.computeBoundingBox();
                geometry.boundingBox.getCenter(middle);
                mesh.geometry.applyMatrix4(new THREE.Matrix4().makeTranslation(-middle.x, -middle.y, -middle.z ) );

                var largestDimension = Math.max(geometry.boundingBox.max.x, geometry.boundingBox.max.y, geometry.boundingBox.max.z)

                camera.position.z = largestDimension * 2;

                var animate = function () {
                    requestAnimationFrame(animate);
                    controls.update();
                    renderer.render(scene, camera);
                }; 

                animate();
            },
            (xhr) => {
                loadMax = Math.max(loadMax, Math.ceil(xhr.loaded / xhr.total * 100))
                loadingIndicator.style.transform = `translateX(-${100 - loadMax}%)`

                if (xhr.loaded === xhr.total) {
                    setTimeout(() => {
                        loadingIndicatorScreen.style.display = "none";
                        loadingIndicator.style.transform = `translateX(-100%)`

                        loadMax = 0
                    }, 500)
                } 
            },
            (error) => {
                console.log(error)
            }
        )

    </script>